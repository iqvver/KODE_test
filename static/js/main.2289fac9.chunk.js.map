{"version":3,"sources":["Common/FormsControls/FormsControls.module.css","Common/Paginator/PaginatorUi.js","Hoc/withAuthRedirect.js","Api/Api.js","redux/pokemonCard-reducer.js","Componetns/Content/Card/CardPokemon/Pokemon.js","Componetns/Content/Card/PokemonContainer.js","redux/auth-reducer.js","Common/OTP/OTP.js","Componetns/Authentication/Login/Login.js","Componetns/Authentication/Login/LoginContainer.js","assets/images/pokelogo.png","Componetns/Authentication/HeaderLogin.js","Componetns/Header/Header.js","Componetns/Header/HeaderContainer.js","Componetns/Authentication/Registration/Registration.js","Componetns/Authentication/Registration/RegistrationContainer.js","redux/pokemonFilter-reducer.js","Common/FormsControls/FormsControls.js","Componetns/Content/Filter/Filter.js","Componetns/Content/Filter/FilterContainer.js","redux/pokemonProfile-reducer.js","Componetns/Content/Card/ProfilePokemon/ProfilePokemon.js","Componetns/Content/Card/ProfilePokemon/ProfilePokemonContainer.js","Componetns/NavBar/NavBarButton.js","App.js","redux/redux-store.js","reportWebVitals.js","index.js"],"names":["module","exports","PaginatorUi","onPageChanged","pageSize","totalCount","currentPage","pagesCount","Math","ceil","items","usePagination","count","selected","map","index","page","type","item","children","style","fontWeight","undefined","color","Button","variant","onClick","e","mapStateToPropsForRedirect","state","isAuth","withAuthRedirect","Component","RedirectComponent","localStorage","getItem","to","this","props","React","connect","instance","axios","withCredentials","baseURL","headers","pokemonsAPI","get","then","card","data","profilePokemonAPI","pokemonId","typePokemonAPI","subtypePokemonAPI","subtype","SET_POKEMONS","SET_CURRENT_PAGE","SET_TOTAL_POKEMONS_COUNT","IS_FETCHING","initialState","pokemons","isFetching","setPokemonsAC","setIsFetchingAC","getPokemons","dispatch","a","pokemonCardReducer","action","Pokemon","pokemon","className","container","xs","id","src","images","small","name","types","subtypes","PokemonContainer","pageNumber","prevProps","prevState","console","log","LinearProgress","Grid","pokemonCard","compose","pokemonCardPage","IS_AUTH","ADD_USER","IS_USER","loginAndPassword","username","login","password","isUser","setIsAuthAC","authReducer","user","newUserName","newUserLogin","pass","newUserPass","OTPgen","handleGenerate","bind","random","OTP","i","floor","setState","align","initialValues","kode","validate","values","errors","maxlength","component","handleClick","disabled","onClose","Login","setIsAuth","isReg","open","setOpen","handleOpen","handleClose","loginError","alert","myLog","l","Modal","Box","Typography","email","test","find","HeaderLogin","FormControlLabel","control","Switch","checked","onChange","label","Header","HeaderContainer","AddUserFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","Registration","addUser","reverse","value","newUserPass2","newId","newUserAC","SET_TYPE_POKEMON","SET_SUBTYPE_POKEMON","SEARCH_POKEMON","typePokemon","subtypePokemon","searchPokemon","pokemonName","pokemonType","pokemonSubtype","setTypePokemonAC","setSubtypePokemonAC","filterReducer","pName","searchPokemonName","pType","searchPokemonType","pSubtype","searchPokemonSubtype","FormControl","input","meta","child","hasError","touched","error","styles","formControl","Input","restProps","TextField","SearchPokemonForm","fullWidth","helperText","select","MenuItem","Filter","newSearchPokemon","filterNamePokemonArr","filter","filterPokemon","filterTypePokemonArr","filterSubtypePokemonArr","filterTypePlusSubtypePokemonArr","size","length","FilterContainer","getTypePokemon","getSubtypePokemon","filterPage","searchPokemonAC","SET_POKEMONS_PROFILE","pokemonsProfile","profileReducer","ProfilePokemon","history","goBack","Divider","number","rarity","supertype","artist","nationalPokedexNumbers","hp","attacks","text","damage","retreatCost","large","ProfilePokemonContainer","match","params","getProfilePokemon","pokemonsProfilePage","profile","withRouter","NavBarButton","App","from","path","render","reducers","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2289fac9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2ODQL\",\"error\":\"FormsControls_error__ez8bl\",\"formSummaryError\":\"FormsControls_formSummaryError__3bz78\"};","import * as React from 'react'\r\nimport usePagination from '@mui/material/usePagination';\r\nimport Button from '@mui/material/Button';\r\n\r\n// пагинатор с ипользованием MUI \r\nlet PaginatorUi = ({ onPageChanged, pageSize, totalCount, currentPage }) => {\r\n  // вычисляем и рисуем все страницы\r\n  let pagesCount = Math.ceil(totalCount / pageSize); \r\n  let { items } = usePagination({\r\n    count: pagesCount, // общее число страниц\r\n    selected: currentPage // выбранная страница\r\n  });\r\n\r\n  return (\r\n    //поведение пагинатора\r\n    <div>\r\n      {items.map(({ page, type, selected, ...item }, index) => {\r\n        let children = null;\r\n        if (type === 'start-ellipsis' || type === 'end-ellipsis') {\r\n          children = '…';\r\n        } else if (type === 'page') {\r\n          children = (\r\n            <div\r\n              type=\"button\"\r\n              style={{\r\n                fontWeight: selected ? 'bold' : undefined,\r\n                color: selected ? '#000' : undefined,\r\n              }}\r\n              {...item}\r\n            >\r\n              {page}\r\n            </div>\r\n          );\r\n        } else {\r\n          children = (\r\n            <div type=\"button\" {...item}>\r\n              {type}\r\n            </div>\r\n          );\r\n        }\r\n        return <Button variant=\"contained\" key={index} onClick={(e) => { onPageChanged(page); }}>{children}</Button>;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PaginatorUi;","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n// получение данных из state\r\nlet mapStateToPropsForRedirect = (state) => ({isAuth: state.isAuth});\r\n\r\n// редирект при отсутствии авторизации\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if ((localStorage.getItem('isAuth') == 'false') || (localStorage.getItem('isAuth') == '{\"isAuth\":\"\"}')) \r\n                return <Redirect to={'/login'} />\r\n                return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import * as axios from \"axios\";\r\n\r\n// базовый адрес запроса на сервис\r\nconst instance = axios.create({\r\n    withCredentials: false,\r\n    baseURL: `https://api.pokemontcg.io/v2/`,\r\n    headers: {\r\n        \"API-KEY\": \"23f9b782-c3a0-4db0-9226-4b0f37c76fb9\"\r\n    }\r\n});\r\n\r\n// получение массива со всеми карточками покемонов\r\nexport const pokemonsAPI = {\r\n    getPokemons(currentPage = 1, pageSize = 250) {\r\n        return instance.get(`cards?page=${currentPage}&count=${pageSize}`)\r\n            .then(card => {\r\n                return card.data;\r\n            });\r\n    }\r\n}\r\n// переход в профиль выбранной карточки покемона\r\nexport const profilePokemonAPI = {\r\n    getProfile(pokemonId) {\r\n        return instance.get(`cards/` + pokemonId);\r\n    }\r\n}\r\n// получение массива со всеми типами покемонов\r\nexport const typePokemonAPI = {\r\n    getTypePokemon() {\r\n        return instance.get(`types`).then(type => {\r\n            return type.data;\r\n        })\r\n    }\r\n}\r\n// получение массива со всеми подтипами покемонов\r\nexport const subtypePokemonAPI = {\r\n    getSubtypePokemon() {\r\n        return instance.get(`subtypes`).then(subtype => {\r\n            return subtype.data;\r\n        })\r\n    }\r\n}","import { pokemonsAPI } from '../Api/Api'\r\n\r\nconst SET_POKEMONS = 'SET_POKEMONS'; // перенная для получения всех покемонов\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'; // перенная для получения одной страници \r\nconst SET_TOTAL_POKEMONS_COUNT = 'SET_TOTAL_POKEMONS_COUNT'; // перенная для получения всех карточек\r\nconst IS_FETCHING = 'IS_FETCHING';\r\n\r\n// иноциализация переменных\r\nlet initialState = {\r\n    pokemons: [], // массив покемонов\r\n    pageSize: 250, // размер страници\r\n    totalCount: 0, // общее число карточек покемонов по умолчению 0\r\n    currentPage: 1, // выбранная сраница карточек покемонов по умолчанию 1\r\n    isFetching: false, // загрузка\r\n};\r\n\r\n// редьюсер получения массива карточек покемонов\r\nconst pokemonCardReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_POKEMONS: {\r\n            // получение карточек \r\n            return { ...state, pokemons: action.pokemons }\r\n        }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            // получение определённой страници\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n\r\n        case SET_TOTAL_POKEMONS_COUNT: {\r\n            // получение общего числа карточек\r\n            return { ...state, totalCount: action.count }\r\n        }\r\n\r\n        case IS_FETCHING: {\r\n            // загрузка on/off\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// экшен для получения карточек\r\nexport const setPokemonsAC = (pokemons) => ({ type: SET_POKEMONS, pokemons });\r\n// экшен для получения определённой страници\r\nexport const setCurrentPageAC = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage });\r\n// экшен для получения общего числа карточек\r\nexport const setPokemonsTotalCountAC = (totalCount) => ({ type: SET_TOTAL_POKEMONS_COUNT, count: totalCount })\r\n// экшен загрузки\r\nexport const setIsFetchingAC = (isFetching) => ({ type: IS_FETCHING, isFetching })\r\n\r\n// получение, обработка и отправка карточек покемонов\r\n// ассинхронный экшен\r\nexport const getPokemons = (currentPage, pageSize, pokemons) => {\r\n    return async (dispatch) => {\r\n        dispatch(setIsFetchingAC(true));\r\n        let card = await pokemonsAPI.getPokemons(currentPage, pageSize, pokemons);\r\n        dispatch(setIsFetchingAC(false));\r\n        dispatch(setPokemonsAC(card.data));\r\n        dispatch(setPokemonsTotalCountAC(card.totalCount));\r\n    }\r\n}\r\n\r\nexport default pokemonCardReducer;\r\n\r\n","import React from 'react'\r\nimport './Pokemon.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// одна крточка покемона\r\nlet Pokemon = ({ pokemon }) => {\r\n    return (\r\n        <div className=\"pokemonCard\" container xs={4} xs={8}>\r\n            <NavLink to={'/cards/' + pokemon.id}>\r\n                <img src={pokemon.images.small} /> </NavLink>\r\n            <div className='cardContent'>\r\n                <span>Имя: {pokemon.name}</span> <br />\r\n                <span>Тип: {pokemon.types}</span> <br />\r\n                <span>Под тип: {pokemon.subtypes}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pokemon;","import { Grid } from '@mui/material';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from 'redux';\r\nimport PaginatorUi from '../../../Common/Paginator/PaginatorUi';\r\nimport { withAuthRedirect } from '../../../Hoc/withAuthRedirect';\r\nimport { getPokemons } from '../../../redux/pokemonCard-reducer';\r\nimport Pokemon from './CardPokemon/Pokemon';\r\nimport './PokemonContainer.css';\r\n\r\n// контейнет со всеми карточками покемонов\r\nclass PokemonContainer extends React.Component {\r\n    // получение из API всех карочек\r\n    componentDidMount() {\r\n        this.props.getPokemons(this.props.currentPage, this.props.pageSize);\r\n    }\r\n    // получение одной страници с карточками покемонов\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.getPokemons(pageNumber, this.props.pageSize);\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        let a = this.state;\r\n        let b = this.props;\r\n        console.log('componentDidUpdate')\r\n    }\r\n    render() {\r\n        // контейнер со страницей карточек покемонов и пагинотор\r\n        // передача нужных переменных\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <LinearProgress /> : null}\r\n                <Grid container className='paginationContainer'>\r\n                    <PaginatorUi\r\n                        currentPage={this.props.currentPage}\r\n                        onPageChanged={this.onPageChanged}\r\n                        totalCount={this.props.totalCount}\r\n                        pagesCount={this.props.pagesCount}\r\n                        pageSize={this.props.pageSize} />\r\n                </Grid>\r\n                <Grid container className='pokemonContainer'>\r\n                    {this.props.pokemons.map(pokemonCard =>\r\n                        <Pokemon pokemon={pokemonCard} />)\r\n                    }\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        pokemons: state.pokemonCardPage.pokemons,\r\n        pageSize: state.pokemonCardPage.pageSize,\r\n        totalCount: state.pokemonCardPage.totalCount,\r\n        currentPage: state.pokemonCardPage.currentPage,\r\n        isFetching: state.pokemonCardPage.isFetching,\r\n        isAuth: state.isAuth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose(connect(\r\n    mapStateToProps, { getPokemons }), withAuthRedirect)(PokemonContainer);\r\n","const IS_AUTH = 'IS_AUTH'; // переменная входа/выхода из приложения\r\nconst ADD_USER = 'ADD_USER'; // переменная нового пользователя (регистрация)\r\nconst IS_USER = 'IS_USER'; // пользователь\r\n\r\n// иноциализация переменных\r\nlet initialState = {\r\n    isAuth: '', // авторизация true/false\r\n    // массив пользователей\r\n    loginAndPassword: [\r\n        { id: 0, username: 'iqvver', login: 'iqvver@gmail.com', password: 1234 },\r\n        { id: 1, username: 'smart', login: 'smart@gamil.com', password: 1488 },\r\n    ],\r\n    // пользователь\r\n    isUser: 'onLine',\r\n\r\n};\r\n// редьюсер авторизаци/регистрации\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case IS_AUTH: {\r\n            // вход в приложениеб переключение true/false\r\n            return { ...state, isAuth: action.isAuth }\r\n        }\r\n        case IS_USER: {\r\n            // пользователь за которого выполнен вход\r\n            return { ...state, isUser\r\n        : action.isUser\r\n     }\r\n        }\r\n        case ADD_USER: {\r\n            // добавление в массив нового пользователя\r\n            let user = action.newUserName;\r\n            let login = action.newUserLogin;\r\n            let pass = action.newUserPass;\r\n\r\n            return {\r\n                ...state,\r\n                loginAndPassword: [...state.loginAndPassword,\r\n                {\r\n                    username: user,\r\n                    login: login,\r\n                    password: pass,\r\n                }]\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// экшен для входа/выхода\r\nexport const setIsAuthAC = (isAuth) => ({ type: IS_AUTH, isAuth })\r\n// экшен для пользователя\r\nexport const setIsUseAC = (isUser) => ({ type: IS_USER, isUser})\r\n// экшен для добавления нового пльзователя\r\nexport const newUserAC = (newUserName, newUserLogin, newUserPass) => ({ type: ADD_USER, newUserName, newUserLogin, newUserPass })\r\n\r\nexport default authReducer;","import { Button } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React, { Component } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport './OTP.css';\r\n\r\n// форма с генерацией случайного 4х значного кода и проверкой ввода\r\nexport default class OTPgen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleGenerate = this.handleGenerate.bind(this);\r\n        this.state = { random: '' };\r\n    }\r\n\r\n    // генератор случайного кода\r\n    handleGenerate() {\r\n        var digits = '0123456789';\r\n        let OTP = '';\r\n        for (let i = 0; i < 4; i++) {\r\n            OTP += digits[Math.floor(Math.random() * 10)];\r\n            this.setState({ random: OTP });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // форма ввода и проверка\r\n            <div align='center'>\r\n                <div>\r\n                    <Button onClick={this.handleGenerate.bind(this)}>Get the code</Button>\r\n                    <Box>CODE: {this.state.random}</Box>\r\n                </div>\r\n                <Formik\r\n                    initialValues={{ kode: '' }}\r\n                    validate={values => {\r\n                        const errors = {};\r\n                        if (!values.kode) {\r\n                            errors.kode = 'The kode field is empty!!';\r\n                        } else if (values.kode != `${this.state.random}`) {\r\n                            errors.kode = 'The kode is not correct!';\r\n                        } return errors;\r\n                    }}>\r\n                    {({ values }) => (\r\n                        <Form>\r\n                            <Field className='otpForm'\r\n                                type=\"number\"\r\n                                name=\"kode\"\r\n                                maxlength=\"4\"\r\n                            //autoFocus \r\n                            />\r\n                            <ErrorMessage name=\"kode\" component=\"div\" />\r\n                            <br />\r\n                            {values.kode\r\n                                ? <Button onClick={\r\n                                    values.kode == `${this.state.random}` ?\r\n                                        this.props.handleClick : null}>LogIn</Button>\r\n                                : <Button disabled={true}>Login</Button>\r\n                            }\r\n                            <Button onClick={this.props.onClose}>Cansel</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './Login.css';\r\nimport Button from '@mui/material/Button'\r\nimport { Redirect } from 'react-router'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Modal from '@mui/material/Modal';\r\nimport OTP from '../../../Common/OTP/OTP';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// страница входа в приложение\r\nconst Login = ({ setIsAuth, isReg, isUser }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    // вход в приложение\r\n    const handleClose = () => setOpen(false);\r\n    if (localStorage.getItem('isAuth') === 'true') {\r\n        return <Redirect to={'/home'} />\r\n    }\r\n\r\n    let handleClick = () => {\r\n        localStorage.isAuth = true;\r\n        setIsAuth(true);\r\n    }\r\n    let loginError = () => {\r\n        alert('Логин или пароль не верны!')\r\n    }\r\n\r\n    // массив зарегестрированных пользователей\r\n    const myLog = [...isReg].map(l =>\r\n        <div>\r\n            name:{l.username} <br />\r\n            login(email):{l.login} <br />\r\n            password:{l.password}\r\n        </div>);\r\n\r\n    return (\r\n        // форма входа в приложение\r\n        <div className='loginForm'>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}>\r\n                <Box className='otpBlock'>\r\n                    <Typography variant=\"h6\" align='center'>\r\n                        Enter the code to log in!\r\n                    </Typography>\r\n                    <OTP handleClick={handleClick}\r\n                        onClose={handleClose} />\r\n                </Box>\r\n            </Modal>\r\n            <NavLink to={'/login'}>\r\n                <Button>Sign In</Button>\r\n            </NavLink>\r\n            <NavLink to={'/registration'}>\r\n                <Button>Registration</Button>\r\n            </NavLink>\r\n            <div className='loginFormBlock'>\r\n                <h2>Please enter your login(email) and password!</h2>\r\n                <Formik\r\n                    initialValues={{ email: '', password: '' }}\r\n                    validate={values => {\r\n                        const errors = {};\r\n                        if (!values.email) {\r\n                            errors.email = 'The email field is empty!';\r\n                        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n                        ) {\r\n                            errors.email = 'Email is not entered correctly';\r\n                        }\r\n                        if (!values.password) {\r\n                            errors.password = 'The password field is empty!!';\r\n                        } return errors;\r\n                    }}\r\n                >\r\n                    {({ values }) => (\r\n                        <Form>\r\n                            <Field\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                            />\r\n                            <ErrorMessage name=\"email\" component=\"div\" />\r\n                            <br />\r\n                            <Field\r\n                                type=\"password\"\r\n                                name=\"password\" />\r\n                            <ErrorMessage name=\"password\" component=\"div\" />\r\n                            <br />\r\n                            <Button onClick={isReg.find(item =>\r\n                                item.login == values.email && item.password == values.password)\r\n                                ? handleOpen : loginError}>LogIn</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <div>\r\n                    {myLog}\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { setIsAuthAC } from '../../../redux/auth-reducer';\r\nimport Login from './Login';\r\n\r\n// получение данных из state\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.isAuth.isAuth,\r\n        isReg: state.isAuth.loginAndPassword,\r\n        isUser: state.isAuth.isUser\r\n    }\r\n}\r\n// отправка данных в state\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setIsAuth: (isAuth) => {\r\n            dispatch(setIsAuthAC(isAuth));\r\n        }\r\n    }\r\n}\r\n// контейнер со страницей входа в приложение\r\n// передача нужных переменных\r\nconst LoginContainer = (props) => {\r\n    return (\r\n        <div>\r\n            <Login\r\n                isAuth={props.isAuth}\r\n                setIsAuth={props.setIsAuth}\r\n                isReg={props.isReg}\r\n                isUser={props.isUser} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);","export default __webpack_public_path__ + \"static/media/pokelogo.08b3d8ee.png\";","import * as React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FormControlLabel, Switch, } from '@material-ui/core';\r\n\r\n// кнопка выхожа из приложения шапке приложения\r\nlet HeaderLogin = ({ setIsAuth, isUser }) => {\r\n    let handleClick = () => {\r\n        localStorage.isAuth = false;\r\n        setIsAuth(false);\r\n    }\r\n    return (\r\n        <div>\r\n            {localStorage.getItem('isAuth') == 'true' ?\r\n                setIsAuth(true) || <div>\r\n                    {isUser}\r\n                </div> : setIsAuth(false) || <div>offLne</div>}\r\n\r\n            {localStorage.getItem('isAuth') == 'true'\r\n                ? <FormControlLabel  //переключение logIn, logAut\r\n                    control={\r\n                        <Switch\r\n                            checked={localStorage.isAuth}\r\n                            onChange={handleClick}\r\n                            aria-label=\"login switch\"\r\n                        />}\r\n                    label={'LogOut'} />\r\n                : <FormControlLabel disabled\r\n                    control={\r\n                        <Switch />}\r\n                    label={<NavLink to={'/login'}></NavLink>} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderLogin;","import * as React from 'react';\r\nimport pokelogo from '../../assets/images/pokelogo.png'\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Header.css';\r\nimport HeaderLogin from '../Authentication/HeaderLogin';\r\n\r\n// Header приложения\r\nconst Header = ({ isAuth, isUser, setIsAuth }) => {\r\n    return (\r\n        <div className='pageHeader'>\r\n            {/*  логотоп в шапке приложения\r\n            <div className='logotipe'>\r\n                    <NavLink to={'/home'}><img src={pokelogo} /></NavLink>\r\n    </div>*/}\r\n            {// текст в шапке приложения\r\n            }\r\n            <div className='pageHeaderText'>\r\n                <NavLink to={'/home'}>\r\n                    <h1>\r\n                        Ultra Super Pokemon 5G Pro\r\n                    </h1>\r\n                </NavLink>\r\n            </div>\r\n            {// кнопки навигации\r\n            }\r\n            <div className='navBar'>\r\n                {// крновка выхода из приложения\r\n                    // передача нужных данных\r\n                }\r\n                <div className='loginBlock'>\r\n                    <HeaderLogin isAuth={isAuth}\r\n                        isUser={isUser}\r\n                        setIsAuth={setIsAuth} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React, { Component } from 'react'\r\nimport Header from './Header'\r\nimport { connect } from 'react-redux';\r\nimport { setIsAuthAC } from \"../../redux/auth-reducer\";\r\n\r\n// контейнет со всеми типами и подтипами покемонов\\\r\n// передача нужных компонентов\r\nclass HeaderContainer extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header setIsAuth={this.props.setIsAuth}\r\n                    isAuth={this.props.isAuth}\r\n                    isUser={this.props.isUser} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n// получение данных из state\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.isAuth.isAuth,\r\n        isUser: state.isAuth.isUser\r\n    }\r\n}\r\n// отправка данных в state\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setIsAuth: (isAuth) => {\r\n            dispatch(setIsAuthAC(isAuth));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);\r\n","import * as React from 'react';\r\nimport './Registration.css';\r\nimport Button from '@mui/material/Button'\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// страница с формой резистрации в приложении (отправка введеных данных в массив)\r\nconst Registration = ({ loginAndPassword, addUser }) => {\r\n    // массив зарегистрированных пользователей\r\n    let myLog = [...loginAndPassword].reverse().map(l =>\r\n        <div>\r\n            name:{l.username} <br />\r\n            login(email):{l.login} <br />\r\n            password:{l.password}\r\n        </div>);\r\n    // функция добавления нового пользователя\r\n    let addNewUser = (value) => {\r\n        if (value.newUserPass == value.newUserPass2) {\r\n            addUser(value.newUserName, value.newUserLogin, value.newUserPass);\r\n            alert('Все ОК');\r\n        }\r\n        else if (value.newUserPass !== value.newUserPass2)\r\n            alert('Пароли не совпадают');\r\n    }\r\n    return (\r\n        // переключение между входом и регистрацией\r\n        <div className='registrationForm'>\r\n            <NavLink to={'/login'}>\r\n                <Button>Sign In</Button>\r\n            </NavLink>\r\n            <NavLink to={'/registration'}>\r\n                <Button>Registration</Button>\r\n            </NavLink>\r\n            <div>\r\n                <AddUserFormRedux onSubmit={addNewUser} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n// форма регистрации (отправки введеных данных в массив)\r\nconst MyUser = ({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className='registrationBlock'>\r\n                <h2>Enter the registration details.</h2>\r\n                <div className='inputWrapper'>\r\n                    <Field className='fieldEmail'\r\n                        name='newUserName'\r\n                        component='input'\r\n                        type='text'\r\n                        placeholder='Enter your name' />\r\n                    <br />\r\n                    <Field className='inputEmail'\r\n                        name='newUserLogin'\r\n                        type='email'\r\n                        component='input'\r\n                        placeholder='Your email' />\r\n                    <br />\r\n                    <Field className='inputPass'\r\n                        name='newUserPass'\r\n                        component='input'\r\n                        type=\"password\"\r\n                        placeholder='Your password' />\r\n                    <br />\r\n                    <Field className='inputPassTo'\r\n                        name='newUserPass2'\r\n                        component='input'\r\n                        type=\"text\"\r\n                        placeholder='Repeat the password' />\r\n                    <br />\r\n                    <div>\r\n                        <Button type=\"submit\">Registration</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddUserFormRedux = reduxForm({\r\n    form: 'userAddForm',\r\n})(MyUser);\r\n\r\nexport default Registration;","import { connect } from 'react-redux';\r\nimport { newUserAC, } from \"../../../redux/auth-reducer\";\r\nimport Registration from './Registration';\r\n\r\n// получение данных из state\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.isAuth,\r\n        loginAndPassword: state.isAuth.loginAndPassword,\r\n        newUserName: state.isAuth.newUserName,\r\n        newUserLogin: state.isAuth.newUserLogin,\r\n        newUserPass: state.isAuth.newUserPass,\r\n    }\r\n}\r\n// отправка данных в state\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addUser: (newUserName, newUserLogin, newUserPass, newId) => {\r\n            dispatch(newUserAC(newUserName, newUserLogin, newUserPass, newId));\r\n        }\r\n    }\r\n}\r\n// контейнер со страницей регистрации в приложении\r\n// передача нужных переменных\r\nconst RegistrationContainer = (props) => {\r\n    return (\r\n        <div>\r\n            <Registration\r\n                loginAndPassword={props.loginAndPassword}\r\n                addUser={props.addUser}\r\n                handleSubmit={props.handleSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationContainer);\r\n","import { typePokemonAPI, subtypePokemonAPI } from \"../Api/Api\";\r\n\r\nconst SET_TYPE_POKEMON = 'SET_TYPE_POKEMON'; // перенная для получения типа покемона\r\nconst SET_SUBTYPE_POKEMON = 'SET_SUBTYPE_POKEMON'; // перенная для получения подтипа покемона\r\nconst SEARCH_POKEMON = 'SEARCH_POKEMON'; // перенная для фильтрации покемона\r\n\r\n// иноциализация переменных\r\nlet initialState = {\r\n    typePokemon: [], // массив типов покемона\r\n    subtypePokemon: [], // массив подтипов покемона\r\n    // переменные для поиска покемонов\r\n    searchPokemon: {\r\n        pokemonName: '',\r\n        pokemonType: '',\r\n        pokemonSubtype: ''\r\n    }\r\n};\r\n\r\n// редьюсер фильтрации карточек покемонов\r\nconst filterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TYPE_POKEMON: {\r\n            // получение типов покемонов\r\n            return { ...state, typePokemon: action.typePokemon }\r\n        }\r\n\r\n        case SET_SUBTYPE_POKEMON: {\r\n            // получение подтипов покемонов\r\n            return { ...state, subtypePokemon: action.subtypePokemon }\r\n        }\r\n\r\n        case SEARCH_POKEMON: {\r\n            // фильтрация карточек покемонов\r\n            let pName = action.searchPokemonName;\r\n            let pType = action.searchPokemonType;\r\n            let pSubtype = action.searchPokemonSubtype;\r\n\r\n            return {\r\n                ...state,\r\n                searchPokemon: {\r\n                    pokemonName: pName,\r\n                    pokemonType: pType,\r\n                    pokemonSubtype: pSubtype\r\n                }\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// экшен для получения типов покемонов\r\nexport const setTypePokemonAC = (typePokemon) => ({ type: SET_TYPE_POKEMON, typePokemon });\r\n// экшен для получения подтипов покемонов\r\nexport const setSubtypePokemonAC = (subtypePokemon) => ({ type: SET_SUBTYPE_POKEMON, subtypePokemon });\r\n// экшен для фильтрации карточек покемонов\r\nexport const searchPokemonAC = (searchPokemonName, searchPokemonType, searchPokemonSubtype) =>\r\n    ({ type: SEARCH_POKEMON, searchPokemonName, searchPokemonType, searchPokemonSubtype });\r\n\r\n// получение, обработка и отправка типов покемонов\r\n// ассинхронный экшен\r\nexport const getTypePokemon = (typePokemon) => {\r\n    return async (dispatch) => {\r\n        let type = await typePokemonAPI.getTypePokemon(typePokemon);\r\n        if (typePokemon.length === 0) {\r\n        dispatch(setTypePokemonAC(type.data));\r\n        }\r\n    }\r\n}\r\n// получение, обработка и отправка типов покемонов из API\r\n// ассинхронный экшен\r\nexport const getSubtypePokemon = (subtypePokemon) => {\r\n    return async (dispatch) => {\r\n        let subtype = await subtypePokemonAPI.getSubtypePokemon(subtypePokemon);\r\n        debugger;\r\n        if (subtypePokemon.length === 0) {\r\n        dispatch(setSubtypePokemonAC(subtype.data));\r\n        }\r\n    }\r\n}\r\n\r\n// получение, обработка поиска\r\nexport const newSearchPokemon = (searchPokemonName, searchPokemonType, searchPokemonSubtype) =>(dispatch) => {\r\n        dispatch(searchPokemonAC(searchPokemonName, searchPokemonType, searchPokemonSubtype));\r\n    }\r\n\r\nexport default filterReducer;","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport { Box, TextField } from '@material-ui/core';\r\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\r\nimport { autofill, Field } from \"redux-form\";\r\n\r\n// работа с базовыми формами ввода\r\nconst FormControl = ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <Box className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <Box>\r\n                {props.children}\r\n            </Box>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </Box>\r\n    )\r\n}\r\n\r\n// компонент текстовое поле\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    // дизайн поля\r\n    return <FormControl {...props}><TextareaAutosize style={{ minHeight: 60 }} {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n// компенент инпут\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    // дизайн инпута\r\n    return <FormControl {...props}><TextField style={{  }} {...input} {...restProps} /></FormControl>\r\n}\r\nexport const createField = (variant, placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            variant={variant}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n)","import * as React from 'react';\r\nimport './Filter.css';\r\nimport Pokemon from '../Card/CardPokemon/Pokemon';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../../../Common/FormsControls/FormsControls';\r\nimport { Button, MenuItem, Grid } from '@mui/material';\r\nimport PaginatorUi from '../../../Common/Paginator/PaginatorUi';\r\n\r\n// форма для фильтрации и поиска карточки покемона\r\nconst searchPokemon = ({ handleSubmit, typePokemon, subtypePokemon }) => {\r\n    return (\r\n        <form className='filterForm' onSubmit={handleSubmit}>\r\n            <Field\r\n                name={\"searchPokemonName\"}\r\n                component={Input}\r\n                fullWidth\r\n                type={'text'}\r\n                variant={'standard'}\r\n                label={'Search for pokemon by name'}\r\n                placeholder={'Search for pokemon by name'}\r\n                helperText=\"Please enter a name\" />\r\n            <Field\r\n                name={\"searchPokemonType\"}\r\n                component={Input}\r\n                fullWidth\r\n                type={'text'}\r\n                variant={'standard'}\r\n                label={'Search for pokemon by type'}\r\n                placeholder={'Search for pokemon by type'}\r\n                helperText=\"Please select type\"\r\n                select >\r\n                {typePokemon.map(pokemonType =>\r\n                    <MenuItem key={pokemonType} value={pokemonType}>\r\n                        {pokemonType}\r\n                    </MenuItem>)}\r\n            </Field>\r\n            <Field\r\n                name={\"searchPokemonSubtype\"}\r\n                component={Input}\r\n                fullWidth\r\n                type={'text'}\r\n                variant={'standard'}\r\n                label={'Search for pokemon by subtype'}\r\n                placeholder={'Search for pokemon by subtype'}\r\n                helperText=\"Please select subtype\"\r\n                select >\r\n                {subtypePokemon.map(pokemonSubtype =>\r\n                    <MenuItem key={pokemonSubtype} value={pokemonSubtype}>\r\n                        {pokemonSubtype}\r\n                    </MenuItem>)}\r\n            </Field>\r\n            <br />\r\n            <div>\r\n                <Button type=\"submit\">Search</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst SearchPokemonForm = reduxForm({\r\n    form: 'pokemonSearchForm',\r\n})(searchPokemon);\r\n\r\n// страница с формой фильтрации и вывода нужных карточек покемонов\r\nconst Filter = ({ typePokemon, searchPokemon, subtypePokemon, newSearchPokemon,\r\n    pokemons, totalCount, pagesCount, pageSize, currentPage, onPageChanged }) => {\r\n\r\n    const filterNamePokemonArr = pokemons.filter(filterPokemon =>\r\n        filterPokemon.name == searchPokemon.pokemonName);\r\n    const filterTypePokemonArr = pokemons.filter(filterPokemon =>\r\n        filterPokemon.types == searchPokemon.pokemonType);\r\n    const filterSubtypePokemonArr = pokemons.filter(filterPokemon =>\r\n        filterPokemon.subtypes == searchPokemon.pokemonSubtype);\r\n    const filterTypePlusSubtypePokemonArr = pokemons.filter(filterPokemon =>\r\n        filterPokemon.types == searchPokemon.pokemonType &&\r\n        filterPokemon.subtypes == searchPokemon.pokemonSubtype);\r\n\r\n    let searchNewPokemon = (value) => {\r\n        newSearchPokemon(value.searchPokemonName, value.searchPokemonType, value.searchPokemonSubtype);\r\n        value.searchPokemonName = '';\r\n        value.searchPokemonType = '';\r\n        value.searchPokemonSubtype = '';\r\n    }\r\n    return (\r\n        <>\r\n            <h4>Search Parameters:</h4>\r\n            <div className='searchParameters'>\r\n                <span className='searchName'>NAME: {searchPokemon.pokemonName}</span>\r\n                <span className='searchType'>TYPE: {searchPokemon.pokemonType}</span>\r\n                <span className='searchSubtype'>SUBTYPE: {searchPokemon.pokemonSubtype}</span>\r\n            </div>\r\n            <div className='filterCard'>\r\n                <hr size='1' color=\"\" />\r\n                <div className='filterBlock'>\r\n                    <SearchPokemonForm onSubmit={searchNewPokemon}\r\n                        typePokemon={typePokemon}\r\n                        subtypePokemon={subtypePokemon}\r\n                    />\r\n                </div>\r\n                <div className='cardBlock'>\r\n                    <Grid container className='paginatorFilterContainer'>\r\n                        <PaginatorUi\r\n                            currentPage={currentPage}\r\n                            onPageChanged={onPageChanged}\r\n                            totalCount={totalCount}\r\n                            pagesCount={pagesCount}\r\n                            pageSize={pageSize} />\r\n                    </Grid>\r\n                    <br />\r\n                    <span>Всего найдено: {\r\n                        (filterNamePokemonArr.length > 0) &&\r\n                            (filterTypePokemonArr.length == 0) &&\r\n                            (filterSubtypePokemonArr.length == 0)\r\n                            ? filterNamePokemonArr.length\r\n                            :\r\n                            (filterNamePokemonArr.length == 0) &&\r\n                                (filterTypePokemonArr.length > 0) &&\r\n                                (filterSubtypePokemonArr.length == 0)\r\n                                ? filterTypePokemonArr.length\r\n\r\n                                : (filterNamePokemonArr.length == 0) &&\r\n                                    (filterTypePokemonArr.length == 0) &&\r\n                                    (filterSubtypePokemonArr.length > 0)\r\n                                    ? filterSubtypePokemonArr.length\r\n\r\n                                    : (filterTypePlusSubtypePokemonArr.length > 0) \r\n                                        ? filterTypePlusSubtypePokemonArr.length\r\n                                        : pokemons.length\r\n                    } покемонов</span>\r\n                    <Grid container className='pokemonFilterContainer'>\r\n                        {\r\n                            (filterNamePokemonArr.length > 0) &&\r\n                                (filterTypePokemonArr.length == 0) &&\r\n                                (filterSubtypePokemonArr.length == 0)\r\n                                ? filterNamePokemonArr.map(pokemonCard =>\r\n                                    <Pokemon pokemon={pokemonCard} />)\r\n                                :\r\n                                (filterNamePokemonArr.length == 0) &&\r\n                                    (filterTypePokemonArr.length > 0) &&\r\n                                    (filterSubtypePokemonArr.length == 0)\r\n                                    ? filterTypePokemonArr.map(pokemonCard =>\r\n                                        <Pokemon pokemon={pokemonCard} />)\r\n\r\n                                    : (filterNamePokemonArr.length == 0) &&\r\n                                        (filterTypePokemonArr.length == 0) &&\r\n                                        (filterSubtypePokemonArr.length > 0)\r\n                                        ? filterSubtypePokemonArr.map(pokemonCard =>\r\n                                            <Pokemon pokemon={pokemonCard} />)\r\n\r\n                                        : (filterNamePokemonArr.length == 0) &&\r\n                                            (filterTypePokemonArr.length > 0) &&\r\n                                            (filterSubtypePokemonArr.length > 0)\r\n                                            ? filterTypePlusSubtypePokemonArr.map(pokemonCard =>\r\n                                                <Pokemon pokemon={pokemonCard} />)\r\n                                            :\r\n                                            pokemons.map(pokemonCard =>\r\n                                                <Pokemon pokemon={pokemonCard} />)\r\n                        }\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { getTypePokemon, getSubtypePokemon, newSearchPokemon } from '../../../redux/pokemonFilter-reducer';\r\nimport { getPokemons } from '../../../redux/pokemonCard-reducer';\r\nimport Filter from './Filter';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../../Hoc/withAuthRedirect';\r\nimport { Grid } from '@mui/material';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\n// контейнет со всеми типами и подтипами покемонов\r\n// контейнер с фильтрацией и пагинацией покемонов по типам и подтипам \r\nclass FilterContainer extends Component {\r\n    // получение данных из редьюсера\r\n    componentDidMount() {\r\n        // получение типов карточек из редьюсера\r\n        this.props.getTypePokemon(this.props.typePokemon);\r\n        // получение подтипов карточек из редьюсера\r\n        this.props.getSubtypePokemon(this.props.subtypePokemon);\r\n        // получение поиска из редьюсера\r\n        this.props.newSearchPokemon(this.props.searchPokemonName,\r\n            this.props.searchPokemonType, this.props.searchPokemonSubtype);\r\n    }\r\n\r\n    // получение одной страници с карточками покемонов\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.getPokemons(pageNumber, this.props.pageSize);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            {this.props.isFetching ? <LinearProgress /> : null}\r\n            {\r\n                // контейнер со отфильтрованной страницей карточек покемонов и пагинотор\r\n                // передача нужных переменных\r\n            }\r\n            <Grid container className='filterContainer' >\r\n                <Filter\r\n                    typePokemon={this.props.typePokemon}\r\n                    subtypePokemon={this.props.subtypePokemon}\r\n                    newSearchPokemon={this.props.newSearchPokemon}\r\n                    searchPokemon={this.props.searchPokemon}\r\n                    pokemons={this.props.pokemons}\r\n                    totalCount={this.props.totalCount}\r\n                    pagesCount={this.props.pagesCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                />\r\n            </Grid>\r\n        </>\r\n        )\r\n    }\r\n}\r\n\r\n// получение данных из state\r\nlet mapStateToProps = (state) => ({\r\n    typePokemon: state.filterPage.typePokemon,\r\n    subtypePokemon: state.filterPage.subtypePokemon,\r\n    searchPokemon: state.filterPage.searchPokemon,\r\n    pokemons: state.pokemonCardPage.pokemons,\r\n\r\n    pageSize: state.pokemonCardPage.pageSize,\r\n    totalCount: state.pokemonCardPage.totalCount,\r\n    currentPage: state.pokemonCardPage.currentPage,\r\n    isFetching: state.pokemonCardPage.isFetching,\r\n});\r\n\r\nexport default compose(connect(mapStateToProps, { getTypePokemon, getSubtypePokemon, newSearchPokemon, getPokemons }), withAuthRedirect)(FilterContainer);","import { profilePokemonAPI } from \"../Api/Api\";\r\n\r\nconst SET_POKEMONS_PROFILE = 'SET_POKEMONS_PROFILE'; // перенная для получения профиля покемона\r\n\r\n// иноциализация переменных\r\nlet initialState = {\r\n    pokemonsProfile: null // переменная профиля \r\n};\r\n// редьюсер профиля покемона\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_POKEMONS_PROFILE: {\r\n            // получение профиля покемона\r\n            return { ...state, pokemonsProfile: action.pokemonsProfile }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// экшен для получение профиля покемона\r\nexport const setProfilePokemon = (pokemonsProfile) => ({ type: SET_POKEMONS_PROFILE, pokemonsProfile });\r\n\r\n// получение, обработка и отправка профиля покемона\r\n// ассинхронный экшен\r\nexport const getProfilePokemon = (pokemonId) => async (dispatch) => {\r\n    let profile = await profilePokemonAPI.getProfile(pokemonId);\r\n    dispatch(setProfilePokemon(profile.data));\r\n}\r\n\r\nexport default profileReducer;","import * as React from 'react';\r\nimport './ProfilePokemon.css';\r\nimport { Divider } from '@material-ui/core';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Button from '@mui/material/Button';\r\n\r\n// страница с информацией о выбранном покемоне\r\nconst ProfilePokemon = ({ pokemonsProfile, ...props }) => {\r\n    if (!pokemonsProfile) {\r\n        return <LinearProgress />\r\n    }\r\n    return (\r\n        <div className='pokemonCardContainer'>\r\n            {\r\n                // кнопка назад (back)\r\n            }\r\n            <div className='buttonBlock'>\r\n                <Button variant=\"text\" onClick={() => props.history.goBack()}>Back</Button>\r\n            </div>\r\n            {\r\n                // информация о покемоне по категориям\r\n            }\r\n            <div className='infoBlock'>\r\n                <div><h2>{pokemonsProfile.data.name}</h2></div>\r\n                <div className='general'>\r\n                    <h4>General informations</h4>\r\n                    <Divider />\r\n                    <div>Set identifier  {pokemonsProfile.data.number}</div>\r\n                    <div>{pokemonsProfile.data.rarity}\r\n                        {pokemonsProfile.data.supertype}</div>\r\n                    <div>Illustrated by  {pokemonsProfile.data.artist}</div>\r\n                </div>\r\n                <div className='informations'>\r\n                    <h4>Vullaby's informations</h4>\r\n                    <Divider />\r\n                    <div>National Pokédex No  {pokemonsProfile.data.nationalPokedexNumbers}</div>\r\n                    <div>{pokemonsProfile.data.hp}  HP</div>\r\n                    <div>{pokemonsProfile.data.types}  type Card</div>\r\n                    <div>{pokemonsProfile.data.subtypes}  {pokemonsProfile.data.supertype}</div>\r\n                </div>\r\n                <div className='attacks'>\r\n                    <h4>Vullaby's Attacks</h4>\r\n                    <Divider />\r\n                    <div>{pokemonsProfile.data.attacks[0].name}</div>\r\n                    <div>{pokemonsProfile.data.attacks[0].text}</div>\r\n                    <div>{pokemonsProfile.data.attacks.name}\r\n                        {pokemonsProfile.data.attacks.damage}</div>\r\n                </div>\r\n                <div className='foot'>\r\n                    <h4>Other Informations</h4>\r\n                    <Divider />\r\n                    {pokemonsProfile.data.retreatCost}\r\n                </div>\r\n            </div>\r\n            {\r\n                // картинка\r\n            }\r\n            <div className='imgBlock'>\r\n                <img src={pokemonsProfile.data.images.large} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfilePokemon;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { getProfilePokemon } from '../../../../redux/pokemonProfile-reducer'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../../../Hoc/withAuthRedirect';\r\nimport ProfilePokemon from './ProfilePokemon';\r\nimport { Grid } from '@mui/material';\r\nimport './ProfilePokemon.css';\r\n\r\n// контейнер с информацией о выбранном покемоне\r\nclass ProfilePokemonContainer extends React.Component {\r\n    componentDidMount() {\r\n        let pokemonId = this.props.match.params.pokemonId;\r\n        this.props.getProfilePokemon(pokemonId);\r\n    }\r\n    render() {\r\n        // контейнер со страницей профиля покемона в приложение\r\n        // передача нужных переменных\r\n        return (\r\n            <Grid container className='profilePokemonContainer'>\r\n                <ProfilePokemon {...this.props} pokemonsProfile={this.props.pokemonsProfile} />\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\n// получение данных из state\r\nlet mapStateToProps = (state) => ({\r\n    pokemonsProfile: state.pokemonsProfilePage.pokemonsProfile\r\n});\r\n\r\nexport default compose(connect(mapStateToProps, { getProfilePokemon }),\r\n    withRouter,\r\n    withAuthRedirect)(ProfilePokemonContainer);","import * as React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './NavBarButton.css';\r\n\r\n// конопки навигации \r\nconst NavBarButton = () => {\r\n    return (\r\n        <div className='navBlock'>\r\n            <NavLink to={'/home'}>\r\n                <span>All Pokemons</span>\r\n                <span>All Pokemons</span>\r\n            </NavLink>\r\n            <NavLink to={'/filter'}>\r\n                <span>Filter out Pokemon</span>\r\n                <span>Filter out Pokemon</span>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBarButton;","import './App.css';\r\nimport * as React from 'react';\r\nimport { Redirect } from 'react-router'\r\nimport { Route } from 'react-router-dom';\r\nimport PokemonContainer from './Componetns/Content/Card/PokemonContainer';\r\nimport LoginContainer from './Componetns/Authentication/Login/LoginContainer';\r\nimport HeaderContainer from './Componetns/Header/HeaderContainer';\r\nimport RegistrationContainer from './Componetns/Authentication/Registration/RegistrationContainer'\r\nimport FilterContainer from './Componetns/Content/Filter/FilterContainer';\r\nimport ProfilePokemonContainer from './Componetns/Content/Card/ProfilePokemon/ProfilePokemonContainer';\r\nimport NavBarButton from './Componetns/NavBar/NavBarButton';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <HeaderContainer />\r\n      </header>\r\n      <div className='App-navBar'>\r\n        <NavBarButton />\r\n      </div>\r\n      <div className='App-content'>\r\n        <Redirect from=\"/\" to=\"/login\" />\r\n        <Route path='/login' render={() => <LoginContainer />} />\r\n        <Route path='/registration' render={() => <RegistrationContainer />} />\r\n        <Route path='/home' render={() => <PokemonContainer />} />\r\n        <Route path='/filter' render={() => <FilterContainer />} />\r\n        <Route path='/cards/:pokemonId?' render={() => <ProfilePokemonContainer />} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { applyMiddleware, combineReducers, createStore, compose } from \"redux\"\r\nimport pokemonCardReducer from \"./pokemonCard-reducer\";\r\nimport profileReducer from \"./pokemonProfile-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport filterReducer from \"./pokemonFilter-reducer\";\r\n\r\n// комбайн со всеми редьюсерами\r\nlet reducers = combineReducers({\r\n    pokemonCardPage: pokemonCardReducer,\r\n    pokemonsProfilePage: profileReducer,\r\n    filterPage: filterReducer,\r\n    isAuth: authReducer,\r\n    form: formReducer\r\n});\r\n\r\n//передача в стор\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nwindow.store = store;\r\nexport default store;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport './index.css';\r\nimport store from './redux/redux-store';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport '@fontsource/roboto/500.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'));\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}